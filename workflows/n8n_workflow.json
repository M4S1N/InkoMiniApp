{
  "name": "n8n workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "leads",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -816,
        2048
      ],
      "id": "0615e705-6331-4de4-a64d-6d61ec14e094",
      "name": "Webhook /leads",
      "webhookId": "54b6edfd-55c2-4a1e-86db-6ac96c3bff9c"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1312,
        1632
      ],
      "id": "71fca7f7-0ac3-4fc8-aa8d-0d4943609766",
      "name": "Webhook Response"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1152,
        1312
      ],
      "id": "0e18ec7a-b010-4981-8549-c76a81ae61da",
      "name": "Webhook /whatsapp",
      "webhookId": "54b6edfd-55c2-4a1e-86db-6ac96c3bff9c"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "40557d3d-3479-4c15-8970-4983091cd282",
              "leftValue": "={{ $json.body.nombre }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "ad6f3b48-4639-49a3-9049-7e9bfa7fb99a",
              "leftValue": "={{ $json.body.contacto }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "b91721df-b644-4b6c-b86d-7e5ce07d32fd",
              "leftValue": "={{ $json.body.material }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "e51ed9eb-716f-4d09-8973-d8d41034166c",
              "leftValue": "={{ $json.body.ancho }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "a0e11256-faa1-4040-ad8f-36e6c771e69f",
              "leftValue": "={{ $json.body.alto }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "45337c5c-36e3-478c-b9ed-f3c34f3f1e1f",
              "leftValue": "={{ $json.body.piezas }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "02a1359e-f751-4619-a559-67860289ca4f",
              "leftValue": "={{ $json.body.instalacion }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0983791c-ef61-4ff5-b25c-65fa8b474a61",
              "leftValue": "={{ $json.body.urgencia }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -512,
        2048
      ],
      "id": "a3f6d5c2-6d09-4b24-8999-f8bb92840306",
      "name": "Check Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3cf6d056-d0bb-47bc-89bf-28185be6fe34",
              "name": "Message",
              "value": "Faltan campos obligatorios.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -96,
        2352
      ],
      "id": "22e8efec-739a-4351-a7f0-3cbe8922934e",
      "name": "Data Error"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        224,
        2352
      ],
      "id": "b9847365-9718-44a1-8a16-157a2c2ed3f8",
      "name": "Respond to Webhook on Data Error"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -176,
        1840
      ],
      "id": "852e0335-0ac8-4f18-8186-0e1b72ab3e1c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "0Q8NoTHYqO4Hnm4W",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "0"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -336,
        1600
      ],
      "id": "ddc2c63e-a0c0-4530-a9a5-46997b99fc4d",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9f0454da-e082-4fe0-865d-ea0dea0b3b4b",
              "name": "Message",
              "value": "={{ $json.body.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -864,
        1312
      ],
      "id": "ff8c795f-f5cd-4a5b-8d50-54440866b5fb",
      "name": "Clean Message"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.Message }}",
        "options": {
          "systemMessage": "=<system_message>\n  <role>\n    You are a specialized assistant for capturing customer information for INKO's large format printing services.\n  </role>\n\n  <task>\n    Extract the following information from the user's message:\n    - name: Customer's full name\n    - contact: Email or phone contact\n    - material: Lona (Frontlit 13 oz), Vinil (Adhesivo Brillante), Vinil Microperforado, PVC 3mm (rígido) or Acrílico 6mm.\n    - area: total area in square meters\n    - quantity: Number of pieces to print\n    - installation: Whether installation service is required (yes/no)\n    - urgent: Whether urgent delivery is needed (yes/no)\n  </task>\n\n  <instructions>\n    <instruction>\n      1. If you have ALL the required information, respond in JSON format:\n      {\n        \"status\": \"complete\",\n        \"data\": {\n          \"nombre\": \"valor\",\n          \"contacto\": \"valor\",\n          \"material\": \"valor\",\n          \"area\": \"valor\",\n          \"cantidad\": \"valor\",\n          \"instalacion\": \"valor\",\n          \"urgente\": \"valor\"\n        }\n      }\n    </instruction>\n    <instruction>\n      2. If information is missing, respond:\n      {\n        \"status\": \"incomplete\",\n        \"message\": \"Friendly message asking for missing data\"\n      }\n    </instruction>\n  </instructions>\n\n  <examples>\n    <example>\n      <input>\n        Hola, soy María García, mi correo electrónico es maria@company.com. Necesito 5 lonas de 3x2 metros para una promoción urgente, sin necesidad de instalación.\n      </input>\n      <output>\n        {\n          \"status\": \"complete\",\n          \"data\": {\n            \"nombre\": \"Maria Garcia\",\n            \"contacto\": \"maria@company.com\",\n            \"material\": \"Lona Frontlit 13 oz\",\n            \"area\": \"6\",\n            \"cantidad\": \"5\",\n            \"instalacion\": \"no\",\n            \"urgente\": \"yes\"\n          }\n        }\n      </output>\n    </example>\n\n    <example>\n      <input>\n        Necesito una letra grande para mi negocio, soy Carlos.\n      </input>\n      <output>\n        {\n          \"status\": \"incomplete\",\n          \"message\": \"Hola Carlos, para generar tu cotización necesito que me proporciones: tu contacto (email o teléfono), qué material prefieres, las dimensiones del trabajo, cuántas piezas necesitas, si requieres instalación y si es urgente.\"\n        }\n      </output>\n    </example>\n\n    <example>\n      <input>\n        Hola, soy Ana López (ana.lopez@gmail.com). Necesito dos piezas de vinilo de 1,5 x 1 metro cada una, con instalación incluida.\n      </input>\n      <output>\n        {\n          \"status\": \"incomplete\",\n          \"message\": \"Hola Ana, tengo casi toda la información. Solo necesito saber si necesitas entrega urgente o si puedes esperar los tiempos de producción normales.\"\n        }\n      </output>\n    </example>\n  </examples>\n</system_message>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -560,
        1312
      ],
      "id": "c6d68c0d-c7f3-440c-a901-2749232cfcc0",
      "name": "AI Interpreter"
    },
    {
      "parameters": {
        "jsCode": "const str = $input.first().json.output;\n\nconst obj = JSON.parse(str);\n\nreturn obj;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        1312
      ],
      "id": "b06986e3-e7b6-4850-812e-448ba160178e",
      "name": "Parse Output"
    },
    {
      "parameters": {
        "jsCode": "const b = $input.first().json.body;\n\n// Calculamos área (conversión a número)\nconst area = (Number(b.ancho) * Number(b.alto)).toString();\n\n// Construimos el objeto final\nconst output = {\n  \"data\": {\n    \"nombre\": b.nombre,\n    \"contacto\": b.contacto,\n    \"material\": b.material,\n    \"area\": area,\n    \"cantidad\": b.piezas,\n    \"instalacion\": b.instalacion,\n    \"urgente\": b.urgencia,\n    \"comentarios\": b.comentarios,\n  }\n};\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        2032
      ],
      "id": "7a9c6b63-55f8-4798-ac0f-3d2347439739",
      "name": "Parse Input"
    },
    {
      "parameters": {
        "jsCode": "const str = $input.first().json.output;\n\nconst obj = JSON.parse(str);\n\nreturn obj;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        1632
      ],
      "id": "180641be-b1a4-4834-bfdb-d99869beb506",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data }}",
        "options": {
          "systemMessage": "=<system_message>\n  <role>\n    You are a specialized assistant for capturing customer information and evaluating interest level for INKO's large format printing services.\n  </role>\n\n  <task>\n    Extract the following information from the user's message:\n    - nombre: Customer's full name\n    - contacto: Email or phone contact\n    - material: Type of material\n    - area: total area in square meters\n    - cantidad: Number of pieces to print\n    - instalacion: Whether installation service is required (yes/no)\n    - urgente: Whether urgent delivery is needed (yes/no)\n\n    Then, determine the level of interest based on the provided rules:\n    - Alto: urgencia < 1 semana, medidas y materiales claros, presupuesto/orden realista, instalación definida.\n    - Medio: urgencia 1–4 semanas o detalles parcialmente definidos, primer cliente con conocimiento del proceso.\n    - Bajo: proyecto vago, sin urgencia, sin presupuesto, respuestas evasivas o solo cotización.\n  </task>\n\n  <instructions>\n    <instruction>\n      1. Siempre responde en JSON usando exactamente esta estructura:\n      {\n        \"data\": {\n          \"nombre\": \"valor\",\n          \"contacto\": \"valor\",\n          \"material\": \"valor\",\n          \"area\": \"valor\",\n          \"cantidad\": \"valor\",\n          \"instalacion\": \"valor\",\n          \"urgente\": \"valor\",\n          \"interes\": \"Alto/Medio/Bajo\"\n        }\n      }\n      Nota: si algún campo llega vacío o ausente en la entrada, inclúyelo como cadena vacía (\"\"). Igual debes calcular y devolver siempre el campo \"interes\" aplicando el criterio definido.\n    </instruction>\n  </instructions>\n\n  <examples>\n    <example>\n      <input>\n        {\n          \"data\": {\n            \"nombre\": \"Maria Garcia\",\n            \"contacto\": \"maria@company.com\",\n            \"material\": \"lona\",\n            \"area\": \"6\",\n            \"cantidad\": \"5\",\n            \"instalacion\": \"no\",\n            \"urgente\": \"yes\",\n          }\n        }\n      </input>\n      <output>\n        {\n          \"data\": {\n            \"nombre\": \"Maria Garcia\",\n            \"contacto\": \"maria@company.com\",\n            \"material\": \"lona\",\n            \"area\": \"6\",\n            \"cantidad\": \"5\",\n            \"instalacion\": \"no\",\n            \"urgente\": \"yes\",\n            \"interes\": \"Alto\"\n          }\n        }\n      </output>\n    </example>\n\n    <example>\n      <input>\n        {\n          \"data\": {\n            \"nombre\": \"Carlos\",\n            \"contacto\": \"\",\n            \"material\": \"\",\n            \"area\": \"\",\n            \"cantidad\": \"\",\n            \"instalacion\": \"\",\n            \"urgente\": \"\",\n          }\n        }\n      </input>\n      <output>\n        {\n          \"data\": {\n            \"nombre\": \"Carlos\",\n            \"contacto\": \"\",\n            \"material\": \"\",\n            \"area\": \"\",\n            \"cantidad\": \"\",\n            \"instalacion\": \"\",\n            \"urgente\": \"\",\n            \"interes\": \"Bajo\"\n          }\n        }\n      </output>\n    </example>\n\n    <example>\n      <input>\n        {\n          \"data\": {\n            \"nombre\": \"Ana Lopez\",\n            \"contacto\": \"ana.lopez@gmail.com\",\n            \"material\": \"vinilo\",\n            \"area\": \"3\",\n            \"cantidad\": \"2\",\n            \"instalacion\": \"yes\",\n            \"urgente\": \"\",\n          }\n        }\n      </input>\n      <output>\n        {\n          \"data\": {\n            \"nombre\": \"Ana Lopez\",\n            \"contacto\": \"ana.lopez@gmail.com\",\n            \"material\": \"vinilo\",\n            \"area\": \"3\",\n            \"cantidad\": \"2\",\n            \"instalacion\": \"yes\",\n            \"urgente\": \"\",\n            \"interes\": \"Medio\"\n          }\n        }\n      </output>\n    </example>\n  </examples>\n</system_message>\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        640,
        1632
      ],
      "id": "21d95b22-0a07-4a44-9765-99ee19a5e737",
      "name": "Interest Classifier"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "201d1bfc-5089-40d8-b2b0-5df4c1aac5bb",
              "leftValue": "={{ $json.status }}",
              "rightValue": "complete",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        128,
        1312
      ],
      "id": "e3ec6a21-e275-4dcb-8703-683041eda5e6",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -64,
        1584
      ],
      "id": "c2c3369d-f6ea-4a11-876d-117efb44df61",
      "name": "Respond to Webhook for missing data"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook /leads": {
      "main": [
        [
          {
            "node": "Check Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook /whatsapp": {
      "main": [
        [
          {
            "node": "Clean Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Data": {
      "main": [
        [
          {
            "node": "Parse Input",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Error": {
      "main": [
        [
          {
            "node": "Respond to Webhook on Data Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Interpreter",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Interest Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Interpreter",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Clean Message": {
      "main": [
        [
          {
            "node": "AI Interpreter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Interpreter": {
      "main": [
        [
          {
            "node": "Parse Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Output": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input": {
      "main": [
        [
          {
            "node": "Interest Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interest Classifier": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Interest Classifier",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook for missing data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "053328f0-f77c-4259-b269-c76b9edf4b76",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9abe7a733ea55a672e200a9e54f1f4909dcd5f608b210998901c6ac21e7bf4d8"
  },
  "id": "m927KcCBR0Gfwx2y",
  "tags": []
}
